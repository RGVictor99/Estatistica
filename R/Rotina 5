dados=c(86.6, 88.6 , 99.4,  90.4,  90.8, 100.3,  92.8,  82.4,  85.9,  87.3,  97.3,
  92.2,  92.4,  90.7,  86.7, 100.7,  93.0,  78.2,  94.2,  87.2,  83.6,  88.7,  83.8,
  85.6,  86.2,  79.9 , 95.0,  90.9,  83.2,  97.5, 92.6,  88.2,  95.4,  95.3,  94.9,
  94.1,  93.3,  89.6,  88.2,  87.7,  85.8 , 88.8,  82.4, 103.0,  97.2,  83.3,  87.6,
  87.2,  94.7,  89.5,  91.5,  89.8,  89.7,  98.2,  88.6, 99.1,  80.7,  93.5,  90.7,
  91.3,  92.3,  87.0 , 88.0,  83.9,  83.6,  91.8,  92.7,  90.3,  95.5, 102.3,  87.1,
  76.1,  96.0,  85.7,  85.9,  96.2,  88.3,  82.7,  91.1,  89.2,  90.0,  92.3,  87.8,
  93.9,  88.7,  92.0,  96.6,  92.6,  88.0 , 96.9,96.0,  93.3,  91.4,  86.2 , 98.2,
  86.4, 103.1 , 99.2,  88.6,  83.8)

dados
sort(dados)  # ordena os dados ROL

summary(dados)
sd(dados)
hist(dados)
#=================================================================

#Confec��o do histograma e da tabela de distribui��o de frequ�ncia
#=================================================================



#Determinar o n�mero de classes
#----------In�cio da fun��o-------------
numerodeclasses<-function(x)
{
if(length(x)<=100){k<-sqrt(length(x))+0.5}
else
{k<-5*log10(length(x))}
return(round(k,0))
}
#----------Fim da fun��o---------------

k<-numerodeclasses(dados);k


#Amplitude total

A<-max(dados)-min(dados)        #calcula a amplitude total, A = >obs - <obs
A

#Amplitude de classe

C<-A/(k-1)
C<-round(C,2)                     #considera apenas duas casas decimais
C

#Limite inferior da primeira classe

LI1<-min(dados)-C/2             #limite inferior da 1� classe
LI1<-round(LI1,2)                #considera apenas duas casas decimais
LI1
limites<-LI1+C*(0:k)
limites

#constroi o histograma e a distribui��o de frequ�ncia, LI|--LS ou [LI, LS)
#=================================================================
# Fun��o "hist" faz o HIstograma e a distribui��o de frequ�ncia nas classes 
# determinadas de acordo com os intervalos de classes (breaks)
#=================================================================


TDF<-hist(dados,breaks=limites,plot=FALSE,right=FALSE)
TDF
n<-length(dados) 
tabela<-matrix(c(rep(7*k)),k,7)# s�o 7 colunas na Tabela
for(i in 1:k)
{tabela[i,1]<-round(TDF$breaks[i],2)
tabela[i,2]<-round(TDF$breaks[i+1],2)
tabela[i,3]<-round(TDF$mids[i],2)
tabela[i,4]<-(TDF$counts[i])
tabela[i,5]<-round(((TDF$counts[i])/n),4)
tabela[i,6]<-round((100*TDF$counts[i])/n,2)
tabela[i,7]<-sum(TDF$counts[1:i])
}
sum(TDF$counts[])
colnames(tabela)<-c("LI","LS","Xi","Fi","Fr","Fp","FAp")
tabela
 
#=================================================================
# Fazendo o HIstograma 
#=================================================================

#Todas as vezes que aparecer breaks, colocar limites

hist(dados,label=FALSE,col="gray",main="",right=FALSE,
xlab="Taxa de Glicose (mg/dL)", ylab="Frequ�ncia absoluta", 
xlim=c(min(TDF$mids)-C,max(TDF$mids)+2*C),
ylim=c(0,(max(TDF$counts)+1)),
breaks=limites,axes=FALSE)
axis(1,at=limites,pos=c(0,0))
axis(2,at=c(seq(0:(max(TDF$counts)+1))-1))

#C<-TDF$mids[2]-TDF$mids[1]

Xip<-c(TDF$mids[1]-C,TDF$mids,TDF$mids[length(TDF$mids)]+C)
frequencia<-c(0,TDF$counts,0)
Xip
lines(frequencia~Xip,type="l",col="blue",lwd=2)
